#pragma once

#ifndef EXOTICS_H
#define EXOTICS_H

#include "./../PartB/yieldCurve.h"
#include "./../PartE/volsurface.h"

#include<valarray>
using namespace std;

/**
@author Simon
*/

static const Real defaultShiftVolSurface=0.01;
static const Real defaultAdvDays=1.;

Real mainmc(Real Expiry, Real Strike, Real Spot, volsurface* pvolsurface, yieldCurve* pyieldCurve,
	   LongNatural nPaths, LongNatural nDates, Integer PrdName);

enum exoticsType {
	AsianCall,
	AsianPut,
	RevLookbackCall,
	RevLookbackPut,
	FlooredCliquet,
	CappedCliquet,
	CollaredCliquet,
	BarrierCall,
	BarrierPut
};

class Exotics
{
public:
	/**Default Constructor 
	@param type: type of exotics product
	@param curve: pointer to the yield curve
	@param surface: pointer to a vol surface for the underlying 
	@param spot: spot of the underlying 
	@param strike: strike1 of the option
	@param expiry: maturity of the option
	@param nPaths: number of paths to be generated by the MC pricer
	@param nDates: number of dates to be generated
	@param strike2: second strike for the option (for collared cliquet here) 
	*/
	Exotics(exoticsType type,yieldCurve* curve,volsurface* surface,Real spot,Real strike,
		Real Expiry,LongNatural nDates=10,Real strike2=-1.,LongNatural nPaths=100000);
	~Exotics(void);
	/** return the price of the option by MC */
	Real getPrice();
	/** return the sensitivity to interest rate of the option by MC */
	Real getRho();
	/** return the sensitivity to time of the option by MC (+defaultAdvDays) */
	Real getTheta();
	/** return the sensitivity to volatility of the option by MC */
	Real getVega();
	/** return the sensitivity to the spot price of the option by MC */
	Real getDelta();

private:
	exoticsType _type;
	Real _expiry;
	Real _spot;
	Real _strike;
	Real _strike2;
	volsurface* _volSurface;
	yieldCurve* _yieldCurve;
	LongNatural _nPaths;
	LongNatural _nDates;
};

#endif;
